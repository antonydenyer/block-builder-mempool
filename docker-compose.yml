version: '3.8'

x-block-builder-mempool:
  &block-builder-mempool
  build:
    context: .
    args:
      VERSION: compose
  depends_on:
    db-migrate:
      condition: service_completed_successfully
  environment:
    ENV: prod
    DB_DSN: "postgres://db:5432/block_builder_mempool?sslmode=disable"
    DB_USERNAME: "postgres"
    DB_PASSWORD: "postgres"
    RPC_CLIENT_URL: "${RPC_CLIENT_URL}"
    CHAIN_ID: "${CHAIN_ID}"
    PORT: "${PORT}:8000"

services:
  db:
    image: postgres:alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - PGUSER=postgres
      - POSTGRES_DB=block_builder_mempool
    ports:
      - '5432:5432'
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 5s
      timeout: 5s
      retries: 3
    volumes:
      - db:/var/lib/postgresql/data

  db-init:
    <<: *block-builder-mempool
    depends_on:
      db:
        condition: service_healthy
    entrypoint: ["app", "db", "init"]

  db-migrate:
    <<: *block-builder-mempool
    depends_on:
      db-init:
        condition: service_completed_successfully
    entrypoint: ["app", "db", "migrate"]

  chain:
    <<: *block-builder-mempool
    entrypoint: ["app", "chain"]
    restart: always
    depends_on:
      db-migrate:
        condition: service_completed_successfully

  pool:
    <<: *block-builder-mempool
    entrypoint: ["app", "pool"]
    restart: always
    depends_on:
      db-migrate:
        condition: service_completed_successfully

  web:
    <<: *block-builder-mempool
    entrypoint: ["app", "web"]
    restart: always
    ports:
      - "${PORT}:8000"
    depends_on:
      db-migrate:
        condition: service_completed_successfully

volumes:
  db:
